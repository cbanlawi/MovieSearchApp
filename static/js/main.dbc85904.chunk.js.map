{"version":3,"sources":["components/MovieCard.js","components/SearchMovies.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","movie","className","src","poster_path","alt","title","release_date","vote_average","overview","SearchMovies","props","useState","query","setQuery","movies","setMovies","searchMovies","event","a","preventDefault","url","fetch","response","json","data","results","console","error","action","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","filter","map","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAgBeA,MAdf,YAA6B,IAATC,EAAQ,EAARA,MAChB,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKA,UAAU,cAAcC,IAAG,0DAAqDF,EAAMG,aAAeC,IAAKJ,EAAMK,MAAQ,YAC7H,sBAAKJ,UAAU,gBAAf,UACI,oBAAIA,UAAU,cAAd,SAA6BD,EAAMK,QACnC,4BAAG,mDAAsBL,EAAMM,kBAC/B,4BAAG,6CAAgBN,EAAMO,kBACzB,mBAAGN,UAAU,oBAAb,SAAkCD,EAAMQ,kBCsCzCC,MA7Cf,SAAsBC,GAClB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACjBD,EAAME,iBAEAC,EAHW,kHAGsGR,EAHtG,iDAMUS,MAAMD,GANhB,cAMPE,EANO,gBAOMA,EAASC,OAPf,OAOPC,EAPO,OAQbT,EAAUS,EAAKC,SARF,kDAUbC,QAAQC,MAAR,MAVa,0DAAH,sDAelB,OACI,qCACI,uBAAMC,OAAO,GAAGC,SAAUb,EAAcf,UAAU,OAAlD,UACI,uBACI6B,QAAQ,QACR7B,UAAU,QAFd,0BAIA,uBACI8B,KAAK,OACLC,KAAK,QACL/B,UAAU,QACVgC,YAAY,uBACZC,MAAOtB,EACPuB,SAAU,SAAClB,GAAD,OAAWJ,EAASI,EAAMmB,OAAOF,UAE/C,wBAAQH,KAAK,SAAS9B,UAAU,SAAhC,uBAEJ,qBAAKA,UAAU,YAAf,SACKa,EAAOuB,QAAO,SAAArC,GAAK,OAAIA,EAAMG,eAAamC,KAAI,SAAAtC,GAAK,OAChD,cAAC,EAAD,CAAWA,MAAOA,GAAYA,EAAMuC,aC7BzCC,MATf,WACE,OACE,sBAAKvC,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,8BACA,cAAC,EAAD,QCKSwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dbc85904.chunk.js","sourcesContent":["import React from 'react'\n\nfunction MovieCard({movie}) {\n    return (\n        <div className=\"card\">\n            <img className=\"card--image\" src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`} alt={movie.title + \" poster\"} />\n            <div className=\"card--content\">\n                <h3 className=\"card--title\">{movie.title}</h3>\n                <p><small>RELEASE DATE: {movie.release_date}</small></p>\n                <p><small>RATING: {movie.vote_average}</small></p>\n                <p className=\"card--description\">{movie.overview}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default MovieCard","import React, { useState } from 'react'\nimport MovieCard from './MovieCard'\n\nfunction SearchMovies(props) {\n    const [query, setQuery] = useState(\"\")\n    const [movies, setMovies] = useState([])\n\n    const searchMovies = async (event) => {\n        event.preventDefault()\n\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=72adce472e3f05f6b1561b1b15d4e21f&language=en-US&query=${query}&page=1&include_adult=false`\n\n        try {\n            const response = await fetch(url)\n            const data = await response.json()\n            setMovies(data.results)\n        } catch(err) {\n            console.error(err)\n        }\n\n    } \n\n    return (\n        <>\n            <form action=\"\" onSubmit={searchMovies} className=\"form\">\n                <label\n                    htmlFor=\"query\"\n                    className=\"label\"\n                >Movie Name: </label>\n                <input\n                    type=\"text\"\n                    name=\"query\"\n                    className=\"input\"\n                    placeholder=\"eg. The Wizard of Oz\"\n                    value={query}\n                    onChange={(event) => setQuery(event.target.value)}\n                />\n                <button type=\"submit\" className=\"button\">Search</button>\n            </form>\n            <div className=\"card-list\">\n                {movies.filter(movie => movie.poster_path).map(movie => (\n                    <MovieCard movie={movie} key={movie.id}/>\n                ))}\n            </div>\n        </>\n    )\n}\n\nexport default SearchMovies","import './App.css';\nimport SearchMovies from './components/SearchMovies';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Movie Search App</h1>\n      <SearchMovies />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}